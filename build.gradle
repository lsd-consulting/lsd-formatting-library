plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
    id 'com.palantir.git-version' version '0.12.3'
    id 'jacoco'
    id 'org.jetbrains.kotlin.jvm' version '1.8.22'
}

apply from: 'hooks.gradle'

group = 'io.github.lsd-consulting'
version = gitVersion().replaceAll("^v", "")
logger.lifecycle("Version=$version")

kotlin {
    jvmToolchain(11)
}

repositories {
    mavenCentral()
}

dependencies {

    // JSON & XML pretty formatting
    implementation 'com.google.code.gson:gson:2.9.0'
    implementation('org.dom4j:dom4j:2.1.3') {
        exclude group: 'pull-parser', module: 'pull-parser'
        because "because pull-parser doesn't support the external-general-entities feature"
    }
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.0'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin:2.13.0'

    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'org.slf4j:slf4j-api:1.7.32'

    testImplementation 'ch.qos.logback:logback-classic:1.4.8'
    testImplementation 'ch.qos.logback:logback-core:1.4.8'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.9.1'
    testImplementation 'org.hamcrest:hamcrest-core:2.2'
    testImplementation 'com.approvaltests:approvaltests:12.1.1'
    testImplementation 'io.mockk:mockk-jvm:1.13.5'
}

test {
    useJUnitPlatform()
    testLogging {
        events "failed"
        exceptionFormat "full"
    }
    finalizedBy jacocoTestReport
    afterSuite { desc, result ->
        if (!desc.parent) {
            println "Unit test results: (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            if (result.testCount == 0) {
                throw new IllegalStateException("No tests were found. Failing the build")
            }
        }
    }
}
check.dependsOn jacocoTestReport
check.dependsOn jacocoTestCoverageVerification

jacoco {
    toolVersion = "0.8.10"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.setEnabled(true)
        csv.setEnabled(false)
        html.setDestination(new File("${project.buildDir}/reports/coverage"))
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'INSTRUCTION'
                minimum = 0.96
            }
        }
        rule {
            limit {
                counter = 'CLASS'
                minimum = 1.00
            }
        }
        rule {
            limit {
                counter = 'BRANCH'
                minimum = 0.94
            }
        }
       rule {
            limit {
                counter = 'METHOD'
                minimum =0.95
            }
        }
    }
}

tasks.register('sourcesJar', Jar) {
    dependsOn classes
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

tasks.register('javadocJar', Jar) {
    archiveClassifier = 'javadoc'
    from javadoc
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = "$group"
            artifactId = 'lsd-formatting-library'
            version = "${version}"

            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = 'lsd-formatting-library'
                description = 'A library providing a formatting functionality, eg. JSON, XML.'
                url = 'https://github.com/lsd-consulting/lsd-formatting-library.git'
                licenses {
                    license {
                        name = "MIT License"
                        url = "https://github.com/lsd-consulting/lsd-formatting-library/blob/main/LICENSE"
                        distribution = "repo"
                    }
                }
                developers {
                    developer {
                        name = "Nick"
                        email = "nicholas.mcdowall@gmail.com"
                        organization = 'NKM IT Solutions'
                        organizationUrl = 'https://github.com/nickmcdowall'
                    }
                    developer {
                        name = "Lukasz"
                        email = "lukasz.gryzbon@gmail.com"
                        organization = 'Integreety Ltd.'
                        organizationUrl = 'https://www.integreety.co.uk'
                    }
                }
                scm {
                    url = "https://github.com/lsd-consulting/lsd-formatting-library.git"
                }
            }
            repositories {
                maven {
                    name = 'sonatype'
                    url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                    credentials(PasswordCredentials)
                }
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}

signing {
    if (project.findProperty("signingKey")) {
        // Use in-memory ascii-armored keys
        def signingKey = findProperty("signingKey")
        def signingPassword = findProperty("signingPassword")
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications.mavenJava
    } else {
        // Use signing properties in ~/.gradle/gradle.properties
        sign publishing.publications.mavenJava
    }
}
